-- Enable the UUID extension in PostgreSQL
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

-- Table to store users
CREATE TABLE IF NOT EXISTS users (
    id SERIAL PRIMARY KEY,                -- Integer primary key
    uuid UUID DEFAULT uuid_generate_v4(), -- UUID generated by PostgreSQL
    username VARCHAR(100) UNIQUE NOT NULL,
    password VARCHAR(100) NOT NULL,
    email VARCHAR(255) UNIQUE NOT NULL,    -- Email address
    verified BOOLEAN DEFAULT FALSE,        -- Email verified status (false by default)
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    );

-- Table to store group chats
CREATE TABLE IF NOT EXISTS group_chats (
    id SERIAL PRIMARY KEY,                                  -- Integer primary key
    uuid UUID DEFAULT uuid_generate_v4() UNIQUE NOT NULL,   -- UUID generated by PostgreSQL
    name VARCHAR(255) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    );

-- Table to store messages
CREATE TABLE IF NOT EXISTS messages (
    id SERIAL PRIMARY KEY,                -- Integer primary key
    uuid UUID DEFAULT uuid_generate_v4(), -- UUID generated by PostgreSQL
    sender_id INT NOT NULL,
    receiver_id INT,
    group_id INT,
    message_text TEXT,                    -- Optional, will be null if media is present
    media_type VARCHAR(50),               -- Media type: "text", "image", "video"
    media_url TEXT,                       -- URL or path to the media file
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (sender_id) REFERENCES users(id),
    FOREIGN KEY (receiver_id) REFERENCES users(id),
    FOREIGN KEY (group_id) REFERENCES group_chats(id)
    );


-- Join table to store users in group chats
CREATE TABLE IF NOT EXISTS group_chat_members (
    group_id INT NOT NULL,
    user_id INT NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY (group_id, user_id),
    FOREIGN KEY (group_id) REFERENCES group_chats(id),
    FOREIGN KEY (user_id) REFERENCES users(id)
    );
